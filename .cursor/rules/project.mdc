---
alwaysApply: true
---

## 개발 우선순위 및 일정

### 즉시 시작할 작업 (이번 주)
1. **Supabase 설정 및 연동**
2. **데이터베이스 스키마 생성**
3. **인증 시스템 구축**

### 1-2주 내 완료 목표
1. **WriteStory 페이지 실제 저장 기능**
2. **Dashboard 실제 데이터 연동**
3. **기본 CRUD 기능 완성**

### 3-4주 내 완료 목표
1. **커뮤니티 기능**
2. **검색 및 필터링**
3. **공유 기능**

---

## 기술 스택 및 개발 가이드

### 기술 스택
- **Frontend**: Vite + React + TypeScript + Tailwind CSS + shadcn/ui
- **Backend**: Supabase (Database + Auth + Storage)
- **상태 관리**: React Query (서버 상태) + React Hook Form (폼 상태)
- **라우팅**: React Router DOM
- **배포**: Vercel (예정)

### 프로젝트 구조
```
src/
├── app/                    # 메인 앱 컴포넌트
├── components/            # 재사용 컴포넌트
│   ├── ui/               # shadcn/ui 컴포넌트
│   ├── layout/           # 레이아웃 컴포넌트
│   ├── forms/            # 폼 컴포넌트
│   └── features/         # 기능별 컴포넌트
├── pages/                # 페이지 컴포넌트
├── hooks/                # 커스텀 훅
├── lib/                  # 유틸리티 함수
│   ├── supabase.ts       # Supabase 클라이언트
│   └── utils.ts          # 공통 유틸리티
├── types/                # TypeScript 타입 정의
└── integrations/         # 외부 서비스 연동
    └── supabase/         # Supabase 관련
```

### 핵심 기능 구현 가이드

#### 1. 문제 해결 일지 작성
```typescript
// 데이터 구조
interface ProblemSolution {
  id: string
  title: string
  problem_description: string
  solution_process: string
  final_solution: string
  tags: string[]
  difficulty: '초급' | '중급' | '고급'
  status: '진행중' | '완료'
  created_at: string
  updated_at: string
  user_id: string
  is_public: boolean
}
```

#### 2. 팀 기능
```typescript
interface Team {
  id: string
  name: string
  description: string
  created_at: string
  owner_id: string
}

interface TeamMember {
  team_id: string
  user_id: string
  role: 'owner' | 'admin' | 'member'
  joined_at: string
}
```

#### 3. 공유 기능
```typescript
interface SharedLink {
  id: string
  problem_solution_id: string
  share_token: string
  expires_at?: string
  created_at: string
}
```

### 개발 규칙

#### 코드 스타일
- **TypeScript**: 모든 컴포넌트와 함수에 타입 정의
- **ESLint + Prettier**: 코드 포맷팅 자동화
- **컴포넌트 명명**: PascalCase (예: `ProblemSolutionCard`)
- **파일 명명**: kebab-case (예: `problem-solution-card.tsx`)

#### 컴포넌트 구조
```typescript
// 컴포넌트 예시 구조
interface ComponentProps {
  // Props 타입 정의
}

export default function Component({ ...props }: ComponentProps) {
  // 상태 관리
  // 이벤트 핸들러
  // 렌더링
  return (
    <div className="...">
      {/* JSX */}
    </div>
  )
}
```

#### 상태 관리
- **React Query**: 서버 상태 관리
- **React Hook Form**: 폼 상태 관리
- **Zustand**: 클라이언트 상태 관리 (필요시)

#### 스타일링 가이드
- **Tailwind CSS**: 유틸리티 클래스 사용
- **shadcn/ui**: 기본 컴포넌트 활용
- **반응형 디자인**: mobile-first 접근
- **다크모드**: 지원 필수

### 성능 최적화
- **이미지 최적화**: 적절한 이미지 포맷 및 크기 사용
- **코드 분할**: 동적 import 활용
- **캐싱**: React Query 활용
- **SEO**: 메타 태그 및 구조화된 데이터

### 보안 고려사항
- **인증**: Supabase Auth 활용
- **권한 관리**: RLS (Row Level Security) 적용
- **입력 검증**: Zod 스키마 검증
- **CORS**: 적절한 CORS 정책 설정

### 테스트 전략
- **Unit Test**: Jest + React Testing Library
- **E2E Test**: Playwright (추후 단계)
- **Type Safety**: TypeScript strict mode

### 배포 및 CI/CD
- **Vercel**: 자동 배포
- **Environment Variables**: 환경별 설정 관리
- **Database Migration**: Supabase 마이그레이션 활용

---

## 개발 시 주의사항

1. **사용자 경험 최우선**: 복잡한 기능보다 직관적인 UX 우선
2. **데이터 일관성**: 문제-과정-해결의 명확한 구조 유지
3. **성능 최적화**: 대용량 텍스트 데이터 처리 최적화
4. **확장성 고려**: 팀 기능 확장을 위한 유연한 구조 설계
5. **개발자 친화적**: 마크다운 지원, 코드 하이라이팅 등

---

## 다음 작업 체크리스트

### 즉시 시작 (오늘)
- [ ] Supabase 프로젝트 생성
- [ ] 환경 변수 설정
- [ ] Supabase 클라이언트 설정
- [ ] 기본 데이터베이스 스키마 생성

### 이번 주 내
- [ ] 인증 시스템 구축
- [ ] WriteStory 페이지 실제 저장 기능
- [ ] Dashboard 실제 데이터 연동

### 다음 주
- [ ] 스토리 상세 페이지 완성
- [ ] 커뮤니티 기능 구현
- [ ] 검색 및 필터링 기능

---

## 참고 자료

- [Supabase Documentation](https://supabase.com/docs)
- [React Query Documentation](https://tanstack.com/query/latest)
- [shadcn/ui Documentation](https://ui.shadcn.com/)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs) 