# Cursor Rules - 문제 해결 기록 서비스

## 서비스 소개

이 서비스는 개발자들이 일상적으로 마주하는 문제들의 해결 과정을 체계적으로 기록하고 공유할 수 있는 플랫폼입니다.

### 핵심 가치
- **문제 해결 과정의 기록**: 단순한 Q&A가 아닌, 문제 발견부터 해결까지의 전체 과정을 기록
- **개인 성장 추적**: 내가 해결한 문제들을 한눈에 모아보며 성장 과정을 확인
- **지식 공유**: 팀원들과 해결 과정을 공유하여 집단 지성 형성
- **실무 중심**: 이론적 답변이 아닌, 실제 해결된 문제와 검증된 해결책 제공

### 차별화 포인트
1. **문제-과정-해결** 구조로 명확한 정보 제공
2. **개인 문제 해결 일지**를 통한 성장 기록
3. **팀 단위 지식 공유** 강화
4. **해결 완료된 문제**만 기록하여 신뢰성 확보

### 타겟 사용자
- 주 타겟: 개발자 (취업 준비생, 주니어/시니어 개발자)
- 부 타겟: 기술 관련 문제 해결이 필요한 모든 직군

---

## 개발 우선순위 및 일정

### ✅ 완료된 기능 (현재 상태)
1. **Supabase 설정 및 연동** ✅
2. **데이터베이스 스키마 생성** ✅
3. **인증 시스템 구축** ✅
4. **WriteStory 페이지 실제 저장 기능** ✅
5. **Dashboard 실제 데이터 연동** ✅
6. **커뮤니티 기능** ✅
7. **스토리 상세 페이지** ✅
8. **공개/비공개 설정** ✅

### 🚀 즉시 시작할 작업 (이번 주)
1. **검색 및 필터링 기능**
2. **스토리 수정/삭제 기능**
3. **사용자 프로필 시스템**

### 1-2주 내 완료 목표
1. **좋아요 및 댓글 시스템**
2. **북마크 및 공유 기능**
3. **팔로우 시스템**

### 3-4주 내 완료 목표
1. **태그 시스템 개선**
2. **알림 시스템**
3. **통계 및 분석 기능**

---

## 기술 스택 및 개발 가이드

### 기술 스택
- **Frontend**: Vite + React + TypeScript + Tailwind CSS + shadcn/ui
- **Backend**: Supabase (Database + Auth + Storage)
- **상태 관리**: React Query (서버 상태) + React Hook Form (폼 상태)
- **라우팅**: React Router DOM
- **배포**: Vercel (예정)

### 프로젝트 구조
```
src/
├── app/                    # 메인 앱 컴포넌트
├── components/            # 재사용 컴포넌트
│   ├── ui/               # shadcn/ui 컴포넌트
│   ├── layout/           # 레이아웃 컴포넌트
│   ├── forms/            # 폼 컴포넌트
│   ├── auth/             # 인증 관련 컴포넌트
│   └── features/         # 기능별 컴포넌트
├── pages/                # 페이지 컴포넌트
│   ├── auth/             # 인증 페이지
│   └── ...               # 기타 페이지
├── hooks/                # 커스텀 훅
├── lib/                  # 유틸리티 함수
│   ├── supabase.ts       # Supabase 클라이언트
│   └── utils.ts          # 공통 유틸리티
├── types/                # TypeScript 타입 정의
└── integrations/         # 외부 서비스 연동
    └── supabase/         # Supabase 관련
```

### 핵심 기능 구현 가이드

#### 1. 문제 해결 일지 작성
```typescript
// 데이터 구조
interface ProblemSolution {
  id: string
  title: string
  problem_description: string
  solution_process: string
  final_solution: string
  tags: string[]
  difficulty: '초급' | '중급' | '고급'
  status: '진행중' | '완료'
  created_at: string
  updated_at: string
  user_id: string
  is_public: boolean
}
```

#### 2. 팀 기능 (향후 구현)
```typescript
interface Team {
  id: string
  name: string
  description: string
  created_at: string
  owner_id: string
}

interface TeamMember {
  team_id: string
  user_id: string
  role: 'owner' | 'admin' | 'member'
  joined_at: string
}
```

#### 3. 소셜 기능 (향후 구현)
```typescript
interface Like {
  id: string
  problem_solution_id: string
  user_id: string
  created_at: string
}

interface Comment {
  id: string
  problem_solution_id: string
  user_id: string
  content: string
  created_at: string
}

interface Bookmark {
  id: string
  problem_solution_id: string
  user_id: string
  created_at: string
}
```

### 개발 규칙

#### 코드 스타일
- **TypeScript**: 모든 컴포넌트와 함수에 타입 정의
- **ESLint + Prettier**: 코드 포맷팅 자동화
- **컴포넌트 명명**: PascalCase (예: `ProblemSolutionCard`)
- **파일 명명**: kebab-case (예: `problem-solution-card.tsx`)

#### 컴포넌트 구조
```typescript
// 컴포넌트 예시 구조
interface ComponentProps {
  // Props 타입 정의
}

export default function Component({ ...props }: ComponentProps) {
  // 상태 관리
  // 이벤트 핸들러
  // 렌더링
  return (
    <div className="...">
      {/* JSX */}
    </div>
  )
}
```

#### 상태 관리
- **React Query**: 서버 상태 관리
- **React Hook Form**: 폼 상태 관리
- **Zustand**: 클라이언트 상태 관리 (필요시)

#### 스타일링 가이드
- **Tailwind CSS**: 유틸리티 클래스 사용
- **shadcn/ui**: 기본 컴포넌트 활용
- **반응형 디자인**: mobile-first 접근
- **다크모드**: 지원 필수

### 성능 최적화
- **이미지 최적화**: 적절한 이미지 포맷 및 크기 사용
- **코드 분할**: 동적 import 활용
- **캐싱**: React Query 활용
- **SEO**: 메타 태그 및 구조화된 데이터

### 보안 고려사항
- **인증**: Supabase Auth 활용
- **권한 관리**: RLS (Row Level Security) 적용
- **입력 검증**: Zod 스키마 검증
- **CORS**: 적절한 CORS 정책 설정

### 테스트 전략
- **Unit Test**: Jest + React Testing Library
- **E2E Test**: Playwright (추후 단계)
- **Type Safety**: TypeScript strict mode

### 배포 및 CI/CD
- **Vercel**: 자동 배포
- **Environment Variables**: 환경별 설정 관리
- **Database Migration**: Supabase 마이그레이션 활용

---

## 개발 시 주의사항

1. **사용자 경험 최우선**: 복잡한 기능보다 직관적인 UX 우선
2. **데이터 일관성**: 문제-과정-해결의 명확한 구조 유지
3. **성능 최적화**: 대용량 텍스트 데이터 처리 최적화
4. **확장성 고려**: 팀 기능 확장을 위한 유연한 구조 설계
5. **개발자 친화적**: 마크다운 지원, 코드 하이라이팅 등

---

## 다음 작업 체크리스트

### 즉시 시작 (이번 주)
- [ ] 검색 및 필터링 기능 구현
  - [ ] Community 페이지에 검색바 추가
  - [ ] 태그별 필터링 기능
  - [ ] 난이도별 필터링 기능
- [ ] 스토리 수정/삭제 기능
  - [ ] Dashboard에서 수정/삭제 버튼 추가
  - [ ] 스토리 수정 페이지 구현
  - [ ] 삭제 확인 다이얼로그
- [ ] 사용자 프로필 시스템
  - [ ] 프로필 페이지 생성
  - [ ] 사용자 정보 표시
  - [ ] 작성한 스토리 목록

### 1-2주 내
- [ ] 좋아요 및 댓글 시스템
  - [ ] 좋아요 기능 구현
  - [ ] 댓글 작성/조회 기능
  - [ ] 댓글 좋아요 기능
- [ ] 북마크 및 공유 기능
  - [ ] 스토리 북마크 기능
  - [ ] 공유 링크 생성
  - [ ] 소셜 미디어 공유
- [ ] 팔로우 시스템
  - [ ] 사용자 팔로우 기능
  - [ ] 팔로우 피드 구현

### 3-4주 내
- [ ] 태그 시스템 개선
  - [ ] 인기 태그 표시
  - [ ] 태그 자동완성
  - [ ] 태그별 추천 스토리
- [ ] 알림 시스템
  - [ ] 댓글 알림
  - [ ] 좋아요 알림
  - [ ] 팔로우 알림
- [ ] 통계 및 분석
  - [ ] 개인 성장 통계
  - [ ] 인기 스토리 분석
  - [ ] 태그별 트렌드

---

## 현재 구현된 기능 상세

### ✅ 인증 시스템
- 이메일/비밀번호 로그인/회원가입
- 로그인 상태 관리
- 보호된 라우트 (Dashboard, WriteStory)

### ✅ 스토리 작성 시스템
- 3단계 구조화된 작성 프로세스
- 태그 선택 기능
- 난이도 설정
- 공개/비공개 설정
- 실제 Supabase 저장

### ✅ 대시보드
- 개인 스토리 목록
- 통계 정보 (총 스토리, 완료율 등)
- 최근 스토리 표시
- 실제 데이터 연동

### ✅ 커뮤니티
- 공개된 스토리 목록
- 로그인 없이 접근 가능
- 로딩/에러 상태 처리
- 실제 데이터 연동

### ✅ 스토리 상세
- 실제 데이터 연동
- 로딩/에러 상태 처리
- 문제-과정-해결 구조 표시

---

## 참고 자료

- [Supabase Documentation](https://supabase.com/docs)
- [React Query Documentation](https://tanstack.com/query/latest)
- [shadcn/ui Documentation](https://ui.shadcn.com/)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs) 